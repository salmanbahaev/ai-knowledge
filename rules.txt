# üöÄ AI-Knowledge Graph Platform - Development Rules & Best Practices

## üìã –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´

### üèóÔ∏è –ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å –∏ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
- **Single Responsibility Principle**: –û–¥–∏–Ω –∫–ª–∞—Å—Å/—Ñ—É–Ω–∫—Ü–∏—è = –æ–¥–Ω–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
- **Dependency Injection**: –í–Ω–µ–¥—Ä–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã/–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
- **Interface Segregation**: –ú–µ–ª–∫–∏–µ, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –≤–º–µ—Å—Ç–æ –±–æ–ª—å—à–∏—Ö
- **Composition over Inheritance**: –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—Ç—å –∫–æ–º–ø–æ–∑–∏—Ü–∏—é –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é
- **Domain-Driven Design**: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–¥–∞ –æ—Ç—Ä–∞–∂–∞–µ—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É

### üîß –§–∞–π–ª–æ–≤–∞—è –°—Ç—Ä—É–∫—Ç—É—Ä–∞
```
src/
‚îú‚îÄ‚îÄ components/           # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
‚îÇ   ‚îú‚îÄ‚îÄ common/          # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (Button, Input, Modal)
‚îÇ   ‚îú‚îÄ‚îÄ layout/          # Layout –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (Header, Sidebar, Footer)
‚îÇ   ‚îî‚îÄ‚îÄ features/        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π
‚îú‚îÄ‚îÄ pages/               # –°—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚îú‚îÄ‚îÄ hooks/               # Custom React hooks
‚îú‚îÄ‚îÄ services/            # API —Å–µ—Ä–≤–∏—Å—ã –∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
‚îú‚îÄ‚îÄ store/               # State management (Zustand/Redux)
‚îú‚îÄ‚îÄ types/               # TypeScript —Ç–∏–ø—ã –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
‚îú‚îÄ‚îÄ utils/               # –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
‚îú‚îÄ‚îÄ constants/           # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚îî‚îÄ‚îÄ assets/              # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã
```

---

## üíª FRONTEND BEST PRACTICES

### ‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- **Code Splitting**: React.lazy() + Suspense –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
- **–ú–µ–º–æ–∏–∑–∞—Ü–∏—è**: React.memo, useMemo, useCallback –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–µ–Ω–¥–µ—Ä–æ–≤
- **Virtualization**: react-window –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤
- **Bundle Analysis**: webpack-bundle-analyzer –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞–∑–º–µ—Ä–∞
- **Tree Shaking**: ES6 imports –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –∫–æ–¥–∞
- **Image Optimization**: WebP, lazy loading, responsive images
- **Preloading**: Critical resources –∏ route preloading

### üîí TypeScript Standards
```typescript
// ‚úÖ –•–æ—Ä–æ—à–æ
interface UserProfile {
  readonly id: string;
  name: string;
  email: string;
  createdAt: Date;
}

// ‚úÖ –°—Ç—Ä–æ–≥–∏–µ —Ç–∏–ø—ã –¥–ª—è API
type ApiResponse<T> = {
  data: T;
  status: 'success' | 'error';
  message?: string;
};

// ‚úÖ Generic –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
interface TableProps<T> {
  data: T[];
  columns: ColumnConfig<T>[];
  onRowClick: (item: T) => void;
}
```

### üé® UI/UX Excellence
- **Design System**: –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞, —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞, –æ—Ç—Å—Ç—É–ø—ã
- **Accessibility**: ARIA labels, keyboard navigation, screen readers
- **Responsive Design**: Mobile-first –ø–æ–¥—Ö–æ–¥, fluid typography
- **Loading States**: –°–∫–µ–ª–µ—Ç–æ–Ω—ã, —Å–ø–∏–Ω–Ω–µ—Ä—ã, –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã
- **Error Boundaries**: Graceful error handling —Å fallback UI
- **Dark Mode**: –°–∏—Å—Ç–µ–º–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
- **Animation**: Smooth transitions, meaningful motion design

### üîó State Management
```typescript
// ‚úÖ Zustand store pattern
interface AuthStore {
  user: User | null;
  token: string | null;
  isLoading: boolean;
  
  // Actions
  login: (credentials: LoginRequest) => Promise<void>;
  logout: () => void;
  refreshToken: () => Promise<void>;
}

// ‚úÖ –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
const useAuthUser = () => useAuthStore(state => state.user);
const useAuthActions = () => useAuthStore(state => ({
  login: state.login,
  logout: state.logout
}));
```

---

## üñ•Ô∏è BACKEND BEST PRACTICES

### üèõÔ∏è API Design
```python
# ‚úÖ RESTful endpoints
GET    /api/v1/documents          # –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
GET    /api/v1/documents/{id}     # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
POST   /api/v1/documents          # –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
PUT    /api/v1/documents/{id}     # –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
PATCH  /api/v1/documents/{id}     # –ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
DELETE /api/v1/documents/{id}     # –£–¥–∞–ª–µ–Ω–∏–µ

# ‚úÖ Consistent response format
{
  "data": {},
  "meta": {
    "total": 100,
    "page": 1,
    "per_page": 20
  },
  "links": {
    "next": "/api/v1/documents?page=2",
    "prev": null
  }
}
```

### üîê Security First
- **Input Validation**: Pydantic models –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Å–µ—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- **Rate Limiting**: –ó–∞—â–∏—Ç–∞ –æ—Ç DDoS –∏ –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞
- **CORS Configuration**: –°—Ç—Ä–æ–≥–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ allowed origins
- **SQL Injection Protection**: –¢–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
- **Authentication**: JWT + refresh tokens, secure httpOnly cookies
- **Authorization**: RBAC —Å –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
- **Data Encryption**: –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î

### üìä Database Excellence
```python
# ‚úÖ Optimized queries
class DocumentRepository:
    async def get_documents_with_stats(
        self, 
        user_id: str,
        limit: int = 20,
        offset: int = 0
    ) -> List[DocumentWithStats]:
        return await self.db.execute(
            select(Document, func.count(DocumentView.id))
            .join(DocumentView, isouter=True)
            .where(Document.owner_id == user_id)
            .group_by(Document.id)
            .limit(limit)
            .offset(offset)
        )

# ‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
CREATE INDEX CONCURRENTLY idx_documents_owner_created 
ON documents(owner_id, created_at DESC);
```

### üöÄ Performance & Scalability
- **Caching Strategy**: Redis –¥–ª—è session, query results, rate limiting
- **Database Connection Pooling**: Async pool —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π min/max connections
- **Background Tasks**: Celery –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
- **Monitoring**: Prometheus metrics, structured logging
- **Health Checks**: Liveness/readiness endpoints –¥–ª—è Kubernetes
- **Graceful Shutdown**: Proper cleanup –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–∏—Å–∞

---

## üß™ TESTING STRATEGY

### Frontend Testing
```typescript
// ‚úÖ Component testing
describe('DocumentCard', () => {
  it('should display document title and metadata', () => {
    render(<DocumentCard document={mockDocument} />);
    expect(screen.getByText(mockDocument.title)).toBeInTheDocument();
    expect(screen.getByText(mockDocument.author)).toBeInTheDocument();
  });

  it('should call onDelete when delete button clicked', async () => {
    const onDelete = jest.fn();
    render(<DocumentCard document={mockDocument} onDelete={onDelete} />);
    
    await user.click(screen.getByRole('button', { name: /delete/i }));
    expect(onDelete).toHaveBeenCalledWith(mockDocument.id);
  });
});
```

### Backend Testing
```python
# ‚úÖ API testing
@pytest.mark.asyncio
async def test_create_document_success(client, auth_headers):
    response = await client.post(
        "/api/v1/documents",
        json={"title": "Test Doc", "content": "Content"},
        headers=auth_headers
    )
    assert response.status_code == 201
    assert response.json()["data"]["title"] == "Test Doc"

# ‚úÖ Service layer testing
@pytest.mark.asyncio
async def test_document_service_create_with_tags():
    service = DocumentService(mock_repo)
    document = await service.create_document(
        CreateDocumentRequest(title="Test", tags=["tag1", "tag2"])
    )
    assert len(document.tags) == 2
```

---

## üîÑ CI/CD & DEPLOYMENT

### Code Quality Gates
```yaml
# ‚úÖ GitHub Actions pipeline
- name: Code Quality Checks
  run: |
    npm run lint
    npm run type-check
    npm run test:coverage
    npm run build
    
- name: Security Scan
  run: |
    npm audit
    python -m safety check
```

### Environment Strategy
```bash
# ‚úÖ Environment-specific configs
.env.development     # Local development
.env.staging        # Staging environment
.env.production     # Production secrets
```

---

## üìù CODE STANDARDS

### Naming Conventions
```typescript
// ‚úÖ Components: PascalCase
const DocumentUploader: React.FC = () => {};

// ‚úÖ Hooks: camelCase —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º use
const useDocumentUpload = () => {};

// ‚úÖ Constants: SCREAMING_SNAKE_CASE
const MAX_FILE_SIZE = 10 * 1024 * 1024;

// ‚úÖ Functions: camelCase, descriptive
const validateEmailFormat = (email: string): boolean => {};
```

### Error Handling
```typescript
// ‚úÖ Typed errors
class ValidationError extends Error {
  constructor(
    public field: string,
    public value: any,
    message: string
  ) {
    super(message);
    this.name = 'ValidationError';
  }
}

// ‚úÖ Result pattern
type Result<T, E = Error> = 
  | { success: true; data: T }
  | { success: false; error: E };
```

### Documentation
```typescript
/**
 * Uploads document to storage and creates database record
 * 
 * @param file - File to upload (max 10MB)
 * @param metadata - Document metadata
 * @returns Promise resolving to created document
 * 
 * @throws {ValidationError} When file exceeds size limit
 * @throws {NetworkError} When upload fails
 * 
 * @example
 * ```typescript
 * const document = await uploadDocument(file, {
 *   title: "My Document",
 *   tags: ["important"]
 * });
 * ```
 */
```

---

## üö® CRITICAL RULES

### ‚ùå –ó–ê–ü–†–ï–©–ï–ù–û
- –õ—é–±–æ–π –∫–æ–¥ –±–µ–∑ TypeScript —Ç–∏–ø–æ–≤
- –ú—É—Ç–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é (—Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ actions)
- Inline styles (—Ç–æ–ª—å–∫–æ CSS-in-JS –∏–ª–∏ CSS modules)
- Hardcoded URLs –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
- –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ ESLint/TypeScript –æ—à–∏–±–æ–∫
- –ö–æ–º–º–∏—Ç—ã –±–µ–∑ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
- Console.log –≤ production –∫–æ–¥–µ

### ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û
- Code review –¥–ª—è –≤—Å–µ—Ö PR
- Unit —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ —É—Ç–∏–ª–∏—Ç
- Integration —Ç–µ—Å—Ç—ã –¥–ª—è API endpoints
- E2E —Ç–µ—Å—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö user flows
- Performance budget: < 3s FCP, < 5s LCP
- Accessibility score > 95 (Lighthouse)
- TypeScript strict mode –±–µ–∑ any
- Structured logging —Å correlation IDs

---

## üìä MONITORING & OBSERVABILITY

### Metrics to Track
```typescript
// ‚úÖ Key Performance Indicators
const KPIs = {
  // Performance
  pageLoadTime: '< 3s',
  apiResponseTime: '< 200ms',
  errorRate: '< 1%',
  
  // Business
  dailyActiveUsers: 'track growth',
  documentUploads: 'track engagement',
  searchQueries: 'track usage patterns',
  
  // Technical
  cpuUsage: '< 70%',
  memoryUsage: '< 80%',
  dbConnectionPool: '< 90%'
};
```

### Alerting Strategy
- **Critical**: P0 - System down, data loss
- **High**: P1 - Major features broken, performance degraded > 50%
- **Medium**: P2 - Minor features broken, performance degraded > 20%
- **Low**: P3 - Enhancement requests, optimization opportunities

---

## üéØ TEAM COLLABORATION

### PR Guidelines
1. **Title**: [TYPE] Brief description (e.g., [FEAT] Add document search)
2. **Description**: What, why, how + screenshots for UI changes
3. **Testing**: How to test + test coverage report
4. **Breaking Changes**: Highlight any breaking changes
5. **Size**: Max 400 lines changed (split larger PRs)

### Code Review Checklist
- [ ] Code follows naming conventions
- [ ] All functions have proper TypeScript types
- [ ] Unit tests cover new functionality
- [ ] No security vulnerabilities
- [ ] Performance impact considered
- [ ] Accessibility requirements met
- [ ] Mobile responsiveness verified
- [ ] Error handling implemented
- [ ] Logging added for debugging

---

## üîÆ FUTURE-PROOFING

### Technology Upgrades
- **React**: Stay within 1 major version of latest
- **TypeScript**: Update quarterly to latest stable
- **Node.js**: LTS version + security patches
- **Dependencies**: Monthly security updates, quarterly feature updates

### Scalability Considerations
- **Horizontal Scaling**: Design for multiple instance deployment
- **Database Sharding**: Plan for data partitioning strategies
- **Microservices**: Identify service boundaries for future splitting
- **API Versioning**: Maintain backward compatibility

---

## üèÜ SUCCESS METRICS

### Development Velocity
- **Feature Delivery**: 2-week sprint cycles
- **Bug Resolution**: 95% closed within 1 week
- **Code Review**: < 24 hours turnaround
- **Deployment Frequency**: Daily to staging, weekly to production

### Quality Metrics
- **Test Coverage**: > 80% for critical paths
- **Code Duplication**: < 5%
- **Technical Debt Ratio**: < 10%
- **Performance Budget**: 100% compliance

---

**üéâ REMEMBER: Great code is not just working code - it's maintainable, testable, secure, performant, and delightful to work with!**
