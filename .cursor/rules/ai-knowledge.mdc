---
description: AI-Knowledge Graph Platform - Development Rules & Best Practices
globs: ["**/*"]
alwaysApply: true
---

# üöÄ AI-Knowledge Graph Platform - Enterprise Development Rules & Best Practices

## üìã –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´

### üèõÔ∏è –í—ã–±—Ä–∞–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: –ì–∏–±—Ä–∏–¥–Ω—ã–π –º–æ–Ω–æ–ª–∏—Ç (–í–∞—Ä–∏–∞–Ω—Ç B)

**Core Stack:**

- **Backend:** FastAPI + PostgreSQL + Redis + Celery
- **AI Search:** DSPy + OpenAI + Vector DB (Pinecone/Weaviate)
- **File Processing:** Ingest + Background jobs
- **Real-time:** WebSocket + Redis pub/sub
- **Frontend:** React 18 + TypeScript + Tailwind

**–ü—Ä–∏–Ω—Ü–∏–ø—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:**

- **Monolith First** - –ø—Ä–æ—Å—Ç–æ—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –¥–µ–ø–ª–æ—è
- **Modular Design** - —á–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ –º–æ–Ω–æ–ª–∏—Ç–∞
- **Performance First** - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞ –∫–∞–∂–¥–æ–º —É—Ä–æ–≤–Ω–µ
- **AI-Native** - DSPy –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–µ–º—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤, –Ω–µ hardcode

### üèóÔ∏è –ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å –∏ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏

- **Single Responsibility Principle**: –û–¥–∏–Ω –∫–ª–∞—Å—Å/—Ñ—É–Ω–∫—Ü–∏—è = –æ–¥–Ω–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
- **Dependency Injection**: –í–Ω–µ–¥—Ä–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã/–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
- **Interface Segregation**: –ú–µ–ª–∫–∏–µ, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –≤–º–µ—Å—Ç–æ –±–æ–ª—å—à–∏—Ö
- **Composition over Inheritance**: –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—Ç—å –∫–æ–º–ø–æ–∑–∏—Ü–∏—é –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é
- **Domain-Driven Design**: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–¥–∞ –æ—Ç—Ä–∞–∂–∞–µ—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É

### üîß –§–∞–π–ª–æ–≤–∞—è –°—Ç—Ä—É–∫—Ç—É—Ä–∞

**Frontend (React):**

```
frontend/src/
‚îú‚îÄ‚îÄ components/          # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
‚îÇ   ‚îú‚îÄ‚îÄ common/         # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (Button, Input, Modal)
‚îÇ   ‚îú‚îÄ‚îÄ layout/         # Layout –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (Header, Sidebar, Footer)
‚îÇ   ‚îî‚îÄ‚îÄ features/       # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π
‚îú‚îÄ‚îÄ pages/              # –°—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚îú‚îÄ‚îÄ hooks/              # Custom React hooks
‚îú‚îÄ‚îÄ services/           # API –∫–ª–∏–µ–Ω—Ç—ã –∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
‚îú‚îÄ‚îÄ store/              # State management (Zustand)
‚îú‚îÄ‚îÄ types/              # TypeScript —Ç–∏–ø—ã –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
‚îú‚îÄ‚îÄ utils/              # –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
‚îú‚îÄ‚îÄ constants/          # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚îú‚îÄ‚îÄ i18n/               # –ò–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
‚îî‚îÄ‚îÄ assets/             # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã
```

**Backend (FastAPI):**

```
backend/
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îú‚îÄ‚îÄ api/            # API endpoints
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ v1/         # API –≤–µ—Ä—Å–∏—è 1
‚îÇ   ‚îú‚îÄ‚îÄ core/           # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
‚îÇ   ‚îú‚îÄ‚îÄ models/         # Pydantic –º–æ–¥–µ–ª–∏
‚îÇ   ‚îú‚îÄ‚îÄ services/       # –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ search/     # DSPy –ø–æ–∏—Å–∫–æ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ingest/     # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ai/         # AI —Å–µ—Ä–≤–∏—Å—ã
‚îÇ   ‚îú‚îÄ‚îÄ db/             # Database –º–æ–¥–µ–ª–∏ –∏ –º–∏–≥—Ä–∞—Ü–∏–∏
‚îÇ   ‚îú‚îÄ‚îÄ tasks/          # Celery –∑–∞–¥–∞—á–∏
‚îÇ   ‚îî‚îÄ‚îÄ utils/          # –£—Ç–∏–ª–∏—Ç—ã
‚îú‚îÄ‚îÄ tests/              # –¢–µ—Å—Ç—ã
‚îî‚îÄ‚îÄ alembic/            # Database –º–∏–≥—Ä–∞—Ü–∏–∏
```

## üåç INTERNATIONALIZATION (i18n)

### üìù Language Support

- **Supported Languages**: English (en) and Russian (ru)
- **Default Language**: English with automatic browser detection
- **Storage**: Language preference saved in localStorage
- **Library**: react-i18next with browser language detector

### üîß Implementation Details

```typescript
// Translation structure
{
  "navigation": { "dashboard": "Dashboard" },
  "common": { "loading": "Loading..." },
  "dashboard": { "title": "Dashboard" }
}

// Component usage
const { t, i18n } = useTranslation('common');
<h1>{t('dashboard.title')}</h1>
```

### üé® Responsive Design for Languages

- **CSS Classes**: `i18n-*` classes for language-specific styling
- **Data Attributes**: `data-lang` for language-specific CSS rules
- **Adaptive Layout**: Russian text ~20-30% longer than English
- **Button Sizing**: `min-width` adjustments for different languages

### ‚úÖ i18n Best Practices

- All user-facing text must use translations
- Placeholder text, error messages, navigation - everything translated
- Layout tested for both languages to prevent text overflow
- Language switcher in header with flags and native language names
- Responsive grid adjustments for longer text in Russian

## üíª FRONTEND BEST PRACTICES

### ‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

- **Code Splitting**: React.lazy() + Suspense –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
- **–ú–µ–º–æ–∏–∑–∞—Ü–∏—è**: React.memo, useMemo, useCallback –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–µ–Ω–¥–µ—Ä–æ–≤
- **Virtualization**: react-window –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤
- **Bundle Analysis**: webpack-bundle-analyzer –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞–∑–º–µ—Ä–∞
- **Tree Shaking**: ES6 imports –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –∫–æ–¥–∞

### üîí TypeScript Standards

```typescript
// ‚úÖ –•–æ—Ä–æ—à–æ - —Å—Ç—Ä–æ–≥–∏–µ —Ç–∏–ø—ã –¥–ª—è API
type ApiResponse<T> = {
  data: T;
  status: "success" | "error";
  message?: string;
};

// ‚úÖ Generic –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
interface TableProps<T> {
  data: T[];
  columns: ColumnConfig<T>[];
  onRowClick: (item: T) => void;
}
```

### üé® UI/UX Excellence

- **Design System**: –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞, —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞, –æ—Ç—Å—Ç—É–ø—ã
- **Accessibility**: ARIA labels, keyboard navigation, screen readers
- **Responsive Design**: Mobile-first –ø–æ–¥—Ö–æ–¥, fluid typography
- **Loading States**: –°–∫–µ–ª–µ—Ç–æ–Ω—ã, —Å–ø–∏–Ω–Ω–µ—Ä—ã, –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã
- **Error Boundaries**: Graceful error handling —Å fallback UI
- **Dark Mode**: –°–∏—Å—Ç–µ–º–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã

## üñ•Ô∏è BACKEND BEST PRACTICES

### üèõÔ∏è API Design

```python
# ‚úÖ RESTful endpoints —Å –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
GET    /api/v1/documents          # –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
GET    /api/v1/documents/{id}     # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
POST   /api/v1/documents          # –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
PUT    /api/v1/documents/{id}     # –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
PATCH  /api/v1/documents/{id}     # –ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
DELETE /api/v1/documents/{id}     # –£–¥–∞–ª–µ–Ω–∏–µ

# ‚úÖ AI Search endpoints
POST   /api/v1/search             # DSPy-powered –ø–æ–∏—Å–∫
GET    /api/v1/search/suggestions # –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
POST   /api/v1/chat               # AI —á–∞—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º

# ‚úÖ File processing endpoints
POST   /api/v1/files/upload       # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
GET    /api/v1/files/{id}/status  # –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
POST   /api/v1/files/bulk         # –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞

# ‚úÖ Consistent response format
{
  "message": "Success message",
  "data": {},
  "meta": {
    "total": 100,
    "page": 1,
    "per_page": 20,
    "took": 0.123
  }
}
```

### ü§ñ AI/ML Integration Patterns

```python
# ‚úÖ DSPy –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–µ–º—ã–µ –ø—Ä–æ–º–ø—Ç—ã
import dspy

class DocumentSearch(dspy.Module):
    def __init__(self):
        self.retrieve = dspy.Retrieve(k=5)
        self.generate = dspy.ChainOfThought("context, question -> answer")

    def forward(self, question):
        context = self.retrieve(question).passages
        return self.generate(context=context, question=question)

# ‚úÖ Async AI calls
async def ai_search(query: str) -> SearchResponse:
    async with httpx.AsyncClient() as client:
        embeddings = await generate_embeddings(query)
        results = await vector_search(embeddings)
        return await ai_rerank(query, results)

# ‚úÖ Background AI tasks
@celery.task
def process_document_ai(doc_id: str):
    doc = get_document(doc_id)
    chunks = ingest_document(doc)
    embeddings = generate_embeddings(chunks)
    save_to_vector_db(embeddings)
```

### üîê Security First

**Input & File Security:**

- **Input Validation**: Pydantic models –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Å–µ—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- **File Type Validation**: –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ MIME types –∏ extensions
- **File Size Limits**: –ú–∞–∫—Å–∏–º—É–º 10MB –Ω–∞ —Ñ–∞–π–ª, 100MB –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- **Malware Scanning**: ClamAV –∏–ª–∏ –∞–Ω–∞–ª–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤
- **File Encryption**: AES-256 –¥–ª—è sensitive –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

**API & Network Security:**

- **Rate Limiting**: 100 req/min per user, 1000 req/min per IP
- **CORS Configuration**: –°—Ç—Ä–æ–≥–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ allowed origins
- **SQL Injection Protection**: –¢–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
- **XSS Protection**: CSP headers, input sanitization
- **HTTPS Only**: Redirect HTTP to HTTPS, HSTS headers

**Authentication & Authorization:**

- **JWT Security**: Short-lived tokens (15 min), secure refresh
- **Password Security**: bcrypt + salt, complexity requirements
- **Session Security**: Secure cookies, automatic timeout
- **RBAC**: Role-based access —Å resource-level permissions
- **Audit Logging**: –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –¥–∞–Ω–Ω—ã–º–∏

### üöÄ Performance & Scalability

- **Caching Strategy**: Redis –¥–ª—è session, query results, vector cache
- **Database Connection Pooling**: Async SQLAlchemy —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º pool
- **Background Tasks**: Celery –¥–ª—è AI processing, file ingestion
- **Vector Search Optimization**: Embedding cache, HNSW indexing
- **Monitoring**: Prometheus metrics, structured logging, AI metrics
- **Health Checks**: Liveness/readiness + AI service health

## üö® CRITICAL RULES

### ‚ùå –ó–ê–ü–†–ï–©–ï–ù–û

- –õ—é–±–æ–π –∫–æ–¥ –±–µ–∑ TypeScript —Ç–∏–ø–æ–≤
- Hardcoded –ø—Ä–æ–º–ø—Ç—ã (—Ç–æ–ª—å–∫–æ DSPy –ø—Ä–æ–≥—Ä–∞–º–º—ã)
- –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ AI API calls (—Ç–æ–ª—å–∫–æ async)
- –ú—É—Ç–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é (—Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ actions)
- Inline styles (—Ç–æ–ª—å–∫–æ Tailwind classes)
- Hardcoded URLs –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
- –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ ESLint/TypeScript –æ—à–∏–±–æ–∫
- Console.log –≤ production –∫–æ–¥–µ
- –ë–ª–æ–∫–∏—Ä—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ main thread

### ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û

- Code review –¥–ª—è –≤—Å–µ—Ö PR
- DSPy –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤–º–µ—Å—Ç–æ string –ø—Ä–æ–º–ø—Ç–æ–≤
- Async/await –¥–ª—è –≤—Å–µ—Ö AI –∏ DB –æ–ø–µ—Ä–∞—Ü–∏–π
- TypeScript strict mode –±–µ–∑ any
- Structured logging —Å correlation IDs
- Performance budget: < 200ms API, < 3s FCP
- AI response time monitoring
- Vector search optimization
- **Manual Testing**: –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π

## üîÑ GIT WORKFLOW & CODE REVIEW

### üåø Branching Strategy

```bash
# Main branches
main              # Production ready code
develop           # Integration branch for features

# Feature branches
feature/auth-jwt  # New features
bugfix/login-fix  # Bug fixes
hotfix/security   # Critical production fixes
release/v1.2.0    # Release preparation

# Branch naming convention
feature/{ticket-id}-{short-description}
bugfix/{ticket-id}-{short-description}
```

### üìù Commit Conventions

```bash
# Format: type(scope): description
feat(auth): add JWT token refresh mechanism
fix(search): resolve DSPy timeout issues
docs(api): update OpenAPI documentation
style(ui): improve button hover states
refactor(db): optimize query performance
test(search): add integration tests
chore(deps): update FastAPI to 0.104.1

# Breaking changes
feat(api)!: change search response format
```

### üîç Code Review Guidelines

**Mandatory checks:**

- [ ] Code follows TypeScript/Python style guides
- [ ] API changes are documented in OpenAPI
- [ ] Performance impact assessed
- [ ] Security implications reviewed
- [ ] Error handling implemented
- [ ] Logging added for debugging
- [ ] Manual testing instructions provided

**Review process:**

1. **Self-review** - author reviews own code first
2. **Automated checks** - CI/CD pipeline passes
3. **Peer review** - at least 1 senior developer approval
4. **Security review** - for auth/security changes
5. **Performance review** - for database/AI changes

## üóÑÔ∏è DATABASE & API STANDARDS

### üìä Database Migration Rules

```python
# ‚úÖ Safe migrations
class Migration:
    def upgrade():
        # Add new columns with defaults
        op.add_column('users', sa.Column('avatar_url', sa.String(), nullable=True))

        # Create new tables
        op.create_table('user_sessions', ...)

        # Add indexes
        op.create_index('idx_documents_created_at', 'documents', ['created_at'])

    def downgrade():
        # Always implement rollback
        op.drop_index('idx_documents_created_at')
        op.drop_table('user_sessions')
        op.drop_column('users', 'avatar_url')

# ‚ùå Dangerous migrations (avoid)
# - Dropping columns without deprecation period
# - Changing column types without compatibility
# - Removing indexes on large tables
```

### üîÑ API Versioning Strategy

```python
# ‚úÖ Versioning approach
/api/v1/documents  # Current stable version
/api/v2/documents  # New version with breaking changes

# ‚úÖ Backward compatibility
class DocumentResponseV1(BaseModel):
    id: str
    title: str
    content: str

class DocumentResponseV2(BaseModel):
    id: str
    title: str
    content: str
    metadata: dict  # New field
    embedding_status: str  # New field

# Support both versions
@app.get("/api/v1/documents", response_model=List[DocumentResponseV1])
@app.get("/api/v2/documents", response_model=List[DocumentResponseV2])
```

## üìù CODE STANDARDS

### Naming Conventions

```typescript
// ‚úÖ Components: PascalCase
const DocumentUploader: React.FC = () => {};

// ‚úÖ Hooks: camelCase —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º use
const useDocumentUpload = () => {};

// ‚úÖ Constants: SCREAMING_SNAKE_CASE
const MAX_FILE_SIZE = 10 * 1024 * 1024;

// ‚úÖ Functions: camelCase, descriptive
const validateEmailFormat = (email: string): boolean => {};
```

### Error Handling

```typescript
// ‚úÖ Typed errors
class ValidationError extends Error {
  constructor(public field: string, public value: any, message: string) {
    super(message);
    this.name = "ValidationError";
  }
}

// ‚úÖ Result pattern
type Result<T, E = Error> =
  | { success: true; data: T }
  | { success: false; error: E };
```

## ü§ñ AI-SPECIFIC DEVELOPMENT STANDARDS

### üß† DSPy Best Practices

```python
# ‚úÖ Structured DSPy programs
class DocumentQA(dspy.Module):
    def __init__(self, k=5):
        super().__init__()
        self.k = k
        self.retrieve = dspy.Retrieve(k=k)
        self.generate_answer = dspy.ChainOfThought("context, question -> answer")

    def forward(self, question: str) -> str:
        # Always validate inputs
        if not question or len(question.strip()) < 3:
            raise ValueError("Question must be at least 3 characters")

        # Retrieve relevant documents
        context = self.retrieve(question).passages

        # Generate answer with context
        prediction = self.generate_answer(
            context="\n".join(context),
            question=question
        )

        return prediction.answer

# ‚úÖ Error handling for AI operations
async def safe_ai_operation(operation_func, *args, **kwargs):
    try:
        result = await operation_func(*args, **kwargs)
        return {"success": True, "data": result}
    except openai.RateLimitError:
        return {"success": False, "error": "rate_limit", "retry_after": 60}
    except openai.APIError as e:
        return {"success": False, "error": "api_error", "details": str(e)}
    except Exception as e:
        return {"success": False, "error": "unknown", "details": str(e)}
```

### üîç Vector Search Optimization

```python
# ‚úÖ Efficient embedding generation
class EmbeddingService:
    def __init__(self):
        self.cache = {}  # In-memory cache for frequent queries
        self.batch_size = 100  # Optimal batch size

    async def generate_embeddings(self, texts: List[str]) -> List[List[float]]:
        # Check cache first
        cached_results = {}
        uncached_texts = []

        for text in texts:
            text_hash = hashlib.md5(text.encode()).hexdigest()
            if text_hash in self.cache:
                cached_results[text] = self.cache[text_hash]
            else:
                uncached_texts.append(text)

        # Generate embeddings for uncached texts in batches
        new_embeddings = {}
        for i in range(0, len(uncached_texts), self.batch_size):
            batch = uncached_texts[i:i + self.batch_size]
            batch_embeddings = await openai.embeddings.create(
                input=batch,
                model="text-embedding-3-small"
            )

            for text, embedding in zip(batch, batch_embeddings.data):
                text_hash = hashlib.md5(text.encode()).hexdigest()
                self.cache[text_hash] = embedding.embedding
                new_embeddings[text] = embedding.embedding

        # Combine results
        return [cached_results.get(text, new_embeddings[text]) for text in texts]

# ‚úÖ Search result ranking
def rank_search_results(results: List[SearchResult], query: str) -> List[SearchResult]:
    # Combine multiple ranking signals
    for result in results:
        # Vector similarity (primary signal)
        vector_score = result.similarity_score

        # Text matching (secondary signal)
        text_score = calculate_text_similarity(query, result.content)

        # Recency bonus (tertiary signal)
        recency_score = calculate_recency_bonus(result.created_at)

        # Combined score with weights
        result.final_score = (
            0.6 * vector_score +
            0.3 * text_score +
            0.1 * recency_score
        )

    return sorted(results, key=lambda x: x.final_score, reverse=True)
```

### üìä AI Performance Monitoring

```python
# ‚úÖ AI metrics tracking
class AIMetrics:
    def __init__(self):
        self.response_times = []
        self.token_usage = []
        self.error_rates = {}

    def track_ai_request(self, operation: str, response_time: float,
                        tokens_used: int, success: bool):
        # Track response time
        self.response_times.append({
            'operation': operation,
            'response_time': response_time,
            'timestamp': datetime.utcnow()
        })

        # Track token usage
        self.token_usage.append({
            'operation': operation,
            'tokens': tokens_used,
            'timestamp': datetime.utcnow()
        })

        # Track error rates
        if operation not in self.error_rates:
            self.error_rates[operation] = {'success': 0, 'error': 0}

        if success:
            self.error_rates[operation]['success'] += 1
        else:
            self.error_rates[operation]['error'] += 1

# ‚úÖ AI quality assurance
def validate_ai_response(response: str, expected_criteria: dict) -> bool:
    checks = {
        'min_length': len(response) >= expected_criteria.get('min_length', 10),
        'max_length': len(response) <= expected_criteria.get('max_length', 2000),
        'contains_answer': any(keyword in response.lower()
                             for keyword in expected_criteria.get('keywords', [])),
        'no_hallucination': not contains_hallucination_patterns(response),
        'appropriate_tone': check_response_tone(response)
    }

    return all(checks.values())
```

## üéØ ENTERPRISE DEVELOPMENT STANDARDS

### üìä Performance Benchmarks

**API Response Times:**

- Search endpoints: < 200ms (95th percentile)
- CRUD operations: < 100ms (95th percentile)
- AI chat responses: < 2s (95th percentile)
- File upload: < 5s for 10MB files

**Frontend Performance:**

- First Contentful Paint: < 1.5s
- Largest Contentful Paint: < 2.5s
- Time to Interactive: < 3.5s
- Cumulative Layout Shift: < 0.1

### üîí Security Standards

**Authentication & Authorization:**

- JWT token expiry: 15 minutes
- Refresh token rotation: enabled
- Password policy: 12+ chars, complexity rules
- Rate limiting: 100 req/min per user

**Data Protection:**

- Encryption at rest: AES-256
- Encryption in transit: TLS 1.3+
- PII data anonymization
- GDPR compliance ready

### üß™ Testing Strategy

**Manual Testing Approach:**

- –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –ø–æ—ç—Ç–∞–ø–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
- –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤–∫–ª—é—á–∞—é—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ URL, –∫–æ–º–∞–Ω–¥—ã –∏ –æ–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –≤ development –æ–∫—Ä—É–∂–µ–Ω–∏–∏

**Performance Testing:**

- Load testing –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö endpoints
- Manual performance monitoring —á–µ—Ä–µ–∑ browser dev tools

### üìà Monitoring & Observability

**Metrics to Track:**

- API latency (p50, p95, p99)
- Error rates by endpoint
- AI model performance
- Vector search accuracy
- User engagement metrics

**Alerting Rules:**

- API error rate > 1%
- Response time > 500ms
- AI service downtime
- Database connection issues
- High memory/CPU usage

### üöÄ Deployment Standards

**Environment Strategy:**

- Development: Local + Docker Compose
- Staging: Cloud with production-like data
- Production: Multi-AZ deployment
- DR: Cross-region backup

**Release Process:**

- Feature flags for new features
- Blue-green deployments
- Automated rollback triggers
- Canary releases for AI models

**üéâ REMEMBER: Enterprise code is maintainable, testable, secure, performant, observable, and scalable by design!**
