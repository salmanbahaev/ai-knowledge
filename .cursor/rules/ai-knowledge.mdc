---
description: AI-Knowledge Graph Platform - Development Rules & Best Practices
globs: ["**/*"]
alwaysApply: true
---

# üöÄ AI-Knowledge Graph Platform - Development Rules & Best Practices

## üìã –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´

### üèóÔ∏è –ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å –∏ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏

- **Single Responsibility Principle**: –û–¥–∏–Ω –∫–ª–∞—Å—Å/—Ñ—É–Ω–∫—Ü–∏—è = –æ–¥–Ω–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
- **Dependency Injection**: –í–Ω–µ–¥—Ä–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã/–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
- **Interface Segregation**: –ú–µ–ª–∫–∏–µ, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –≤–º–µ—Å—Ç–æ –±–æ–ª—å—à–∏—Ö
- **Composition over Inheritance**: –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—Ç—å –∫–æ–º–ø–æ–∑–∏—Ü–∏—é –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é
- **Domain-Driven Design**: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–¥–∞ –æ—Ç—Ä–∞–∂–∞–µ—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É

### üîß –§–∞–π–ª–æ–≤–∞—è –°—Ç—Ä—É–∫—Ç—É—Ä–∞

```
src/
‚îú‚îÄ‚îÄ components/           # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
‚îÇ   ‚îú‚îÄ‚îÄ common/          # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (Button, Input, Modal)
‚îÇ   ‚îú‚îÄ‚îÄ layout/          # Layout –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (Header, Sidebar, Footer)
‚îÇ   ‚îî‚îÄ‚îÄ features/        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π
‚îú‚îÄ‚îÄ pages/               # –°—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚îú‚îÄ‚îÄ hooks/               # Custom React hooks
‚îú‚îÄ‚îÄ services/            # API —Å–µ—Ä–≤–∏—Å—ã –∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
‚îú‚îÄ‚îÄ store/               # State management (Zustand/Redux)
‚îú‚îÄ‚îÄ types/               # TypeScript —Ç–∏–ø—ã –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
‚îú‚îÄ‚îÄ utils/               # –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
‚îú‚îÄ‚îÄ constants/           # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚îî‚îÄ‚îÄ assets/              # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã
```

## üåç INTERNATIONALIZATION (i18n)

### üìù Language Support

- **Supported Languages**: English (en) and Russian (ru)
- **Default Language**: English with automatic browser detection
- **Storage**: Language preference saved in localStorage
- **Library**: react-i18next with browser language detector

### üîß Implementation Details

```typescript
// Translation structure
{
  "navigation": { "dashboard": "Dashboard" },
  "common": { "loading": "Loading..." },
  "dashboard": { "title": "Dashboard" }
}

// Component usage
const { t, i18n } = useTranslation('common');
<h1>{t('dashboard.title')}</h1>
```

### üé® Responsive Design for Languages

- **CSS Classes**: `i18n-*` classes for language-specific styling
- **Data Attributes**: `data-lang` for language-specific CSS rules
- **Adaptive Layout**: Russian text ~20-30% longer than English
- **Button Sizing**: `min-width` adjustments for different languages

### ‚úÖ i18n Best Practices

- All user-facing text must use translations
- Placeholder text, error messages, navigation - everything translated
- Layout tested for both languages to prevent text overflow
- Language switcher in header with flags and native language names
- Responsive grid adjustments for longer text in Russian

## üíª FRONTEND BEST PRACTICES

### ‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

- **Code Splitting**: React.lazy() + Suspense –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
- **–ú–µ–º–æ–∏–∑–∞—Ü–∏—è**: React.memo, useMemo, useCallback –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–µ–Ω–¥–µ—Ä–æ–≤
- **Virtualization**: react-window –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤
- **Bundle Analysis**: webpack-bundle-analyzer –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞–∑–º–µ—Ä–∞
- **Tree Shaking**: ES6 imports –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –∫–æ–¥–∞

### üîí TypeScript Standards

```typescript
// ‚úÖ –•–æ—Ä–æ—à–æ - —Å—Ç—Ä–æ–≥–∏–µ —Ç–∏–ø—ã –¥–ª—è API
type ApiResponse<T> = {
  data: T;
  status: "success" | "error";
  message?: string;
};

// ‚úÖ Generic –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
interface TableProps<T> {
  data: T[];
  columns: ColumnConfig<T>[];
  onRowClick: (item: T) => void;
}
```

### üé® UI/UX Excellence

- **Design System**: –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞, —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞, –æ—Ç—Å—Ç—É–ø—ã
- **Accessibility**: ARIA labels, keyboard navigation, screen readers
- **Responsive Design**: Mobile-first –ø–æ–¥—Ö–æ–¥, fluid typography
- **Loading States**: –°–∫–µ–ª–µ—Ç–æ–Ω—ã, —Å–ø–∏–Ω–Ω–µ—Ä—ã, –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã
- **Error Boundaries**: Graceful error handling —Å fallback UI
- **Dark Mode**: –°–∏—Å—Ç–µ–º–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã

## üñ•Ô∏è BACKEND BEST PRACTICES

### üèõÔ∏è API Design

```python
# ‚úÖ RESTful endpoints
GET    /api/v1/documents          # –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
GET    /api/v1/documents/{id}     # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
POST   /api/v1/documents          # –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
PUT    /api/v1/documents/{id}     # –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
PATCH  /api/v1/documents/{id}     # –ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
DELETE /api/v1/documents/{id}     # –£–¥–∞–ª–µ–Ω–∏–µ

# ‚úÖ Consistent response format
{
  "data": {},
  "meta": {
    "total": 100,
    "page": 1,
    "per_page": 20
  }
}
```

### üîê Security First

- **Input Validation**: Pydantic models –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Å–µ—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- **Rate Limiting**: –ó–∞—â–∏—Ç–∞ –æ—Ç DDoS –∏ –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞
- **CORS Configuration**: –°—Ç—Ä–æ–≥–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ allowed origins
- **SQL Injection Protection**: –¢–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
- **Authentication**: JWT + refresh tokens, secure httpOnly cookies
- **Authorization**: RBAC —Å –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏

### üöÄ Performance & Scalability

- **Caching Strategy**: Redis –¥–ª—è session, query results, rate limiting
- **Database Connection Pooling**: Async pool —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π min/max connections
- **Background Tasks**: Celery –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
- **Monitoring**: Prometheus metrics, structured logging
- **Health Checks**: Liveness/readiness endpoints –¥–ª—è Kubernetes

## üö® CRITICAL RULES

### ‚ùå –ó–ê–ü–†–ï–©–ï–ù–û

- –õ—é–±–æ–π –∫–æ–¥ –±–µ–∑ TypeScript —Ç–∏–ø–æ–≤
- –ú—É—Ç–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é (—Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ actions)
- Inline styles (—Ç–æ–ª—å–∫–æ CSS-in-JS –∏–ª–∏ CSS modules)
- Hardcoded URLs –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
- –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ ESLint/TypeScript –æ—à–∏–±–æ–∫
- Console.log –≤ production –∫–æ–¥–µ

### ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û

- Code review –¥–ª—è –≤—Å–µ—Ö PR
- Unit —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ —É—Ç–∏–ª–∏—Ç
- Integration —Ç–µ—Å—Ç—ã –¥–ª—è API endpoints
- TypeScript strict mode –±–µ–∑ any
- Structured logging —Å correlation IDs
- Performance budget: < 3s FCP, < 5s LCP

## üìù CODE STANDARDS

### Naming Conventions

```typescript
// ‚úÖ Components: PascalCase
const DocumentUploader: React.FC = () => {};

// ‚úÖ Hooks: camelCase —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º use
const useDocumentUpload = () => {};

// ‚úÖ Constants: SCREAMING_SNAKE_CASE
const MAX_FILE_SIZE = 10 * 1024 * 1024;

// ‚úÖ Functions: camelCase, descriptive
const validateEmailFormat = (email: string): boolean => {};
```

### Error Handling

```typescript
// ‚úÖ Typed errors
class ValidationError extends Error {
  constructor(public field: string, public value: any, message: string) {
    super(message);
    this.name = "ValidationError";
  }
}

// ‚úÖ Result pattern
type Result<T, E = Error> =
  | { success: true; data: T }
  | { success: false; error: E };
```

**üéâ REMEMBER: Great code is not just working code - it's maintainable, testable, secure, performant, and delightful to work with!**
